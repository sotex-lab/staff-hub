{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Staff hub","text":"<p>This is an internal project of Sotex Solutions that is used for managing staff. It is maintained by the team and is meant to be beginner friendly whilst keeping a high quality of code.</p>"},{"location":"#setup","title":"Setup","text":"<p>This project is meant to be cross platform and should be runnable both from Windows, (any) Linux and MacOS.</p>"},{"location":"#list-of-software-needed","title":"List of software needed","text":"<ol> <li>.NET 8 - chosen SDK and Runtime for this project</li> <li>python - if you opt for pyenv you can use that to install any version of python so this can be skipped</li> <li>(Optional) pyenv - python version management system, it isn't supported for Windows, but there is a fork which adds that support here</li> <li>poetry - python dependency management system, used for creating environments and easier porting to different platforms.</li> </ol>"},{"location":"#pre-commit-hooks","title":"Pre-commit hooks","text":"<p>Pre-commit hooks are a great way to have some general checks of your files locally before even creating a commit. Usually they are used to lint the code, automatically format files, and can do much much more.</p> <pre><code># when you have python installed run the following command in the root of repository\npip install pre-commit\npre-commit install\n</code></pre>"},{"location":"#setup-on-windows","title":"Setup on Windows","text":"<p>Since Windows has a lot of incompatibilities with other operating systems its suggested to use WSL.</p> <p>To install it here is a great article from Microsoft on how to do that.</p> <p>NOTE: Onces the setup of WSL is complete you should add all the software from List of software needed</p>"},{"location":"writing-your-docs/","title":"Documentation Structure","text":"<p>The <code>docs</code> folder in this repository is dedicated to organizing and hosting documentation related to the codebase. It follows a structured approach to provide clear and comprehensive documentation.</p>"},{"location":"writing-your-docs/#organization","title":"Organization","text":"<p>The documentation is organized into directories based on different aspects of the project. Each directory may contain relevant files, subdirectories, and additional resources. This structure helps users and contributors find information efficiently.</p>"},{"location":"writing-your-docs/#example-structure","title":"Example Structure:","text":"<pre><code>docs/\n\u2502 getting-started/\n\u2502 development/\n\u2502 api-reference/\n\u2502 ...\n</code></pre> <p>Feel free to explore the directories to find the information you need.</p>"},{"location":"writing-your-docs/#github-pages","title":"GitHub Pages","text":"<p>We host our documentation using GitHub Pages, making it accessible at https://sotex-lab.github.io/staff-hub/. GitHub Pages automatically updates with changes to the <code>docs</code> folder, providing an always up-to-date reference.</p>"},{"location":"writing-your-docs/#contributing-to-documentation","title":"Contributing to Documentation","text":"<p>Contributions to documentation are highly encouraged. If you find any inaccuracies, missing information, or want to add new sections, please open an issue or submit a pull request. Your contributions help improve the overall user experience.</p>"},{"location":"precommit/precommit/","title":"Pre-commit Hooks","text":"<p>The <code>precommit</code> folder contains custom pre-commit hooks for this repository. Pre-commit hooks are scripts that run before each commit to ensure that the committed code meets certain criteria.</p>"},{"location":"precommit/precommit/#custom-hooks","title":"Custom Hooks","text":"<p>Inside this folder, you may find various bash scripts, Python scripts, or any other scripts that are executed as pre-commit hooks. These hooks help enforce code quality, formatting standards, and other checks before changes are committed.</p>"},{"location":"precommit/precommit/#example-structure","title":"Example Structure:","text":"<pre><code>precommit/\n\u2502 check-formatting.sh\n\u2502 lint-python.py\n\u2502 custom-checks/\n\u2502 ...\n</code></pre>"},{"location":"precommit/precommit/#integration-with-pre-commit","title":"Integration with Pre-commit","text":"<p>The pre-commit hooks are integrated into the workflow using pre-commit, a framework for managing and maintaining multi-language pre-commit hooks.</p> <p>To use these hooks, make sure you have pre-commit installed. You can install it by following the instructions in the pre-commit documentation.</p>"},{"location":"precommit/precommit/#configuration","title":"Configuration","text":"<p>In the root of the repository, you'll find a configuration file named <code>.pre-commit-config.yaml</code>. This file lists the pre-commit hooks and their configurations. When you run <code>pre-commit install</code>, it sets up the hooks as part of the Git commit process.</p>"},{"location":"precommit/precommit/#contributing-to-hooks","title":"Contributing to Hooks","text":"<p>If you have additional pre-commit hooks or improvements to existing ones, contributions are welcome. Feel free to submit a pull request with your changes.</p>"},{"location":"scripts/scripts/","title":"Custom Scripts Documentation","text":"<p>Welcome to the documentation for the custom scripts in the \"scripts\" folder. This folder contains a variety of scripts for different purposes.</p>"},{"location":"scripts/scripts/#python-scripts","title":"Python Scripts","text":"<p>You can find Python scripts in this folder. If you are new to Python, check out the official Python documentation for more information:</p> <ul> <li>Python Documentation</li> </ul>"},{"location":"scripts/scripts/#bash-scripts","title":"Bash Scripts","text":"<p>Bash scripts are also part of this collection. If you are unfamiliar with Bash scripting, here's a resource to get you started:</p> <ul> <li>Bash Guide for Beginners</li> </ul>"},{"location":"scripts/scripts/#other-scripts","title":"Other Scripts","text":"<p>The \"scripts\" folder may contain scripts in various languages or for different tasks. Each script may have its own documentation or comments to explain its purpose and usage.</p> <p>Feel free to explore the scripts and refer to this documentation for insights into their functionalities.</p>"},{"location":"src/classes/","title":"Classes","text":""},{"location":"src/classes/#user","title":"User","text":"<p>The User class represents individuals within the system and encapsulates information related to user accounts.</p>"},{"location":"src/classes/#attributes","title":"Attributes","text":"<ol> <li>Name - string: The full name of the user.</li> <li>Email - string: The email address associated with the user's account.</li> <li>Password - string: The secure password for the user's account.</li> <li>PhoneNumber - string: The contact number of the user.</li> <li>Team - string: Specifies the team to which the user belongs.</li> </ol> <p>Role:  Represents the user's role within the system, which can be either \"admin\" or \"employee.\"</p>"},{"location":"src/classes/#leave","title":"Leave","text":"<p>The Leave class manages information related to leave requests made by users.</p>"},{"location":"src/classes/#attributes_1","title":"Attributes","text":"<ol> <li>StartDate - DateOnly: The start date of the leave request.</li> <li>EndDate - DateOnly: The end date of the leave request.</li> <li>Description - string: Provides additional details or reasons for the leave.</li> <li>Status - string: Indicates the current status of the leave request.</li> </ol>"},{"location":"src/classes/#daystally","title":"DaysTally","text":"<p>The DaysTally class is associated with the User class and is specifically designed to track and manage the allocation and usage of days related to annual leave for individual users.</p>"},{"location":"src/classes/#attributes_2","title":"Attributes","text":"<ol> <li>Amount - int: Represents the numerical value associated with the action, such as the number of days taken or accrued.</li> <li>Timestamp - DateTIme: Records the date and time when the action occurred.</li> <li>Action - string: Describes the nature of the action, providing context to the days' tally.</li> </ol>"},{"location":"src/classes/#publicholiday","title":"PublicHoliday","text":"<p>The PublicHoliday class manages information about public holidays.</p>"},{"location":"src/classes/#attributes_3","title":"Attributes","text":"<ol> <li>Name - string:  The name of the public holiday.</li> <li>StartDate - DateOnly: The start date of the public holiday.</li> <li>EndDate - DateOnly: The end date of the public holiday.</li> </ol>"},{"location":"src/classes/#diagram","title":"Diagram","text":""},{"location":"src/functionality/","title":"Project functionality","text":""},{"location":"src/functionality/#admin-functionality","title":"Admin functionality:","text":""},{"location":"src/functionality/#calendar","title":"Calendar","text":""},{"location":"src/functionality/#description","title":"Description","text":"<p>Admins should be able to view a calendar displaying team members scheduled leaves, public holidays, and other relevant events.</p>"},{"location":"src/functionality/#requests-for-leave-approve-or-reject","title":"Requests for Leave (Approve or Reject)","text":""},{"location":"src/functionality/#description_1","title":"Description","text":"<p>Admin, equipped with the authority to oversee their team's leave requests, should be able to review and take action on pending leave requests. This includes the capability to approve or reject leave requests submitted by team members. Upon making a decision, the system triggers an email notification to the respective employee, conveying the status of their leave request. This feature ensures efficient communication between admin and employees regarding leave approval outcomes.</p>"},{"location":"src/functionality/#steps","title":"Steps:","text":"<ol> <li>Log in as a admin.</li> <li>Navigate to the leave management section.</li> <li>View the pending leave requests.</li> <li>Approve or reject each request.</li> </ol>"},{"location":"src/functionality/#all-leaves","title":"All Leaves","text":""},{"location":"src/functionality/#description_2","title":"Description","text":"<p>Admin should be able to view all leave requests and their statuses for their team members.</p>"},{"location":"src/functionality/#employee-management","title":"Employee management","text":""},{"location":"src/functionality/#description_3","title":"Description","text":"<p>Admin should be able to manage their team members, including adding new employees and updating their profiles.</p>"},{"location":"src/functionality/#employee-functionality","title":"Employee Functionality:","text":""},{"location":"src/functionality/#calendar_1","title":"Calendar","text":""},{"location":"src/functionality/#description_4","title":"Description","text":"<p>Employees should be able to view a calendar displaying their scheduled leaves, public holidays, and other relevant events.</p>"},{"location":"src/functionality/#create-leave-requestrevoke","title":"Create Leave Request/Revoke","text":""},{"location":"src/functionality/#description_5","title":"Description","text":"<p>Employees should be able to submit leave requests and revoke existing leave requests.</p>"},{"location":"src/functionality/#steps_1","title":"Steps","text":"<ol> <li>Log in as an employee.</li> <li>Navigate to the leave management section.</li> <li>Click on \"Create Leave Request.\"</li> <li>Fill in the required information (start date, end date, reason).</li> <li>Submit the request.</li> <li>To revoke a request, navigate to the \"My Previous Leaves\" section and find the leave request to revoke.</li> </ol>"},{"location":"src/functionality/#preview-usedremaining-leaves","title":"Preview Used/Remaining Leaves","text":""},{"location":"src/functionality/#description_6","title":"Description","text":"<p>Employees should be able to check how many leaves they have used and how many remain.</p>"},{"location":"src/functionality/#employee-previous-leaves","title":"Employee Previous Leaves","text":""},{"location":"src/functionality/#description_7","title":"Description","text":"<p>Employees should be able to view a history of their past leave requests and their statuses.</p>"},{"location":"src/src/","title":"Source Code (src) Folder","text":"<p>The <code>src</code> folder is the primary location for storing the source code of this repository. It is organized following a convention where each project resides in its own folder.</p>"},{"location":"src/src/#project-structure","title":"Project Structure","text":"<p>To maintain a clear and organized codebase, consider organizing the projects within the <code>src</code> folder in a way that reflects the structure of the solution file (.sln). This helps developers easily locate and navigate through the code.</p>"},{"location":"src/src/#example-structure","title":"Example Structure:","text":"<pre><code>src/\n\u2502\n\u251c\u2500\u2500 ProjectA/\n\u2502 \u251c\u2500\u2500 Controllers/\n\u2502 \u251c\u2500\u2500 Models/\n\u2502 \u251c\u2500\u2500 Services/\n\u2502 \u2514\u2500\u2500 ...\n\u2502\n\u251c\u2500\u2500 ProjectB/\n\u2502 \u251c\u2500\u2500 Views/\n\u2502 \u251c\u2500\u2500 Helpers/\n\u2502 \u2514\u2500\u2500 ...\n\u2502\n\u251c\u2500\u2500 SharedUtilities/\n\u2502 \u251c\u2500\u2500 Logging/\n\u2502 \u251c\u2500\u2500 Utilities/\n\u2502 \u2514\u2500\u2500 ...\n\u2502\n\u2514\u2500\u2500 ...\n</code></pre>"},{"location":"src/src/#folder-per-project-convention","title":"Folder-Per-Project Convention","text":"<p>To keep things organized, it is recommended to have a separate folder for each project within the <code>src</code> directory. This structure ensures a clear separation of concerns and makes it easier to manage and understand the codebase.</p>"},{"location":"src/src/#contribution-guidelines","title":"Contribution Guidelines","text":"<p>If you are contributing to an existing project or adding a new one, make sure to follow the established conventions for the <code>src</code> folder. Consistency in project structure enhances collaboration and makes it simpler for everyone to work with the code.</p>"},{"location":"workflows/debugging-ci/","title":"Debugging CI","text":""},{"location":"workflows/debugging-ci/#convetional-commits","title":"Convetional commits","text":"<p>We use conventional commits and each MR should have a title structured as the following example:</p> <pre><code>type(scope): message\n</code></pre> <p>Even though the check will pass if you ommit <code>(scope)</code> the team will ask you to adhere to this policy so we maintain the quality of history.</p>"},{"location":"workflows/debugging-ci/#building-and-linting-of-dotnet-code","title":"Building and linting of dotnet code","text":"<p>In the process of automatic quality checking of code we run linting and building. While we accept building warnings (which we might remove at some point in the future), we won't accept code that is not linted properly.</p> <p>When the check fails due to linting one should simply run the following command:</p> <pre><code>dotnet format StaffHub.sln\n</code></pre> <p>After that the tool will automatically lint the solutions and they can push the linted code which will then result in a green check mark on the check.</p>"},{"location":"workflows/debugging-ci/#building-of-docs","title":"Building of docs","text":"<p>If one was changing the documentation settings or the content, on a MR will run a check if the mkdocs can build the site. If it fails there is an error and the check will fail.</p> <p>To debug this the easiest is to locally run mkdocs and fix the issue.</p>"},{"location":"workflows/workflows/","title":"GitHub Workflows Convention","text":"<p>This repository utilizes GitHub Actions workflows for automating various tasks. GitHub Actions allows you to automate your software development workflows directly within your repository.</p>"},{"location":"workflows/workflows/#what-are-github-workflows","title":"What are GitHub Workflows?","text":"<p>GitHub Workflows are custom automated processes that you can define in your repository. These workflows are triggered by various events, such as pushes to a repository, pull requests, or other activities. They help automate tasks like building, testing, and deploying your code.</p>"},{"location":"workflows/workflows/#convention-one-job-per-file","title":"Convention: One Job per File","text":"<p>To maintain clarity and organization, we follow a convention of placing one job configuration in one file. Each workflow job is defined in a separate YAML file within the <code>.github/workflows/</code> directory.</p>"},{"location":"workflows/workflows/#example-structure","title":"Example Structure:","text":"<pre><code>.github/workflows/\n\u2502 build.yml\n\u2502 test.yml\n\u2502 deploy.yml\n</code></pre> <p>This convention makes it easier to manage and understand individual workflows, promoting a clean and maintainable codebase.</p>"},{"location":"workflows/workflows/#contributing","title":"Contributing","text":"<p>Feel free to contribute by creating or enhancing existing workflows based on our convention. If you have suggestions or improvements, open an issue or submit a pull request.</p>"}]}