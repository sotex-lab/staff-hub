@page "/adminPanel"
@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.WebUtilities
@using Persistence.IRepository
@using Persistence.Repositories
@using Domain.Models
@using System.Text
@attribute [Authorize(Roles = SD.Role_Admin)]
@inject IUnitOfWork _unitOfWork
@inject ICustomEmailSender _customEmailSender
@inject NavigationManager _navigationManager
@inject RoleManager<IdentityRole> _roleManager
@inject UserManager<IdentityUser> _userManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link rel="stylesheet" href="panel.css">
<link rel="stylesheet" href="addNew.css">
<link rel="stylesheet" href="actions.css">
<title>Admin - Emlopyee list</title>


<div class="modal" id="myModal">
	<div class="modal-content">
		<div class="prop" id="emp">
			<div id="p1">New Employee</div>
			<button class="close" id="close">ðŸ—™</button>
		</div>
		<div class="prop">
			<div class="prop2">
				<label class="text">Full Name</label>
				<input type="text" @bind="fullName">
			</div>
			<div class="prop2">
				<label class="text">Email</label>
				<input type="email" @bind="email">
			</div>
		</div>
		<div class="prop">
			<div class="prop2">
				<label class="text">Phone Number</label>
				<input type="text" @bind="phone">
			</div>
			<div class="prop2">
				<label class="text">Role</label>
				<select class="role" @oninput="UpdatePosition">
					<option class="status_option" value="RegularEmployee">Regular Employee</option>
					<option class="status_option" value="TeamLead">Team Lead</option>
					<option class="status_option" value="Admin">Admin</option>
				</select>
			</div>
			<div class="prop2">
				<label class="text">Teams</label>
				<input type="text" @bind="team">
			</div>
		</div>
		<div class="prop3">
			<div>
				<button class="cancel" id="cancel">Cancel</button>
				<button id="btnsave" class="save" @onclick="CreateUser">Save</button>
			</div>
		</div>
	</div>
</div>

<div class="panel">
	<div class="container">
		<div class="employee">
			Employees
		</div>
		<div class="commands">
			<div class="command">
				<div>
					<input class="search" id="search" placeholder="Search" type="search" @bind="searchTerm" @oninput="OnSearchInput">
				</div>
				<button class="btn1" id="add_new">
					Add New
				</button>
			</div>
		</div>
		<div class="lista">
			<table>
				<tr>
					<th>Name</th>
					<th>Email</th>
					<th>Phone Number</th>
					<th>Team</th>
					<th>Role</th>
					<th>Action</th>
				</tr>
				@foreach (var (u, role) in Users.Zip(UserRoles, (u, r) => (u, r)))
				{
					<tr>
						<td>@u.FullName</td>
						<td>@u.Email</td>
						<td>@u.PhoneNumber</td>
						<td>@u.Team.Name</td>
						<td>@role</td>
						<td>
							<button class="action_btn" id="act_btn" @onclick="(() => ShowActionMenu(u.Id))">
								â€¢â€¢â€¢
							</button>
							<div class="content" id="content-@u.Id" style="display:none">
								<button class="btn" @onclick="(() => EditUser(u.Id))">
									<svg width="16" height="16" fill="none" xmlns="http://www.w3.org/2000/svg">
										<path fill-rule="evenodd" clip-rule="evenodd" d="M6.21119 14.635C6.25449 14.6134 6.27607 14.5918 6.31938 14.5484L14.9941 5.86049C16.3353 4.51719 16.3353 2.35064 14.9941 1.00742C13.6529 -0.335806 11.4896 -0.335806 10.1484 1.00742L1.45212 9.67362L1.45078 9.67497L1.45077 9.67498C1.40851 9.71745 1.38701 9.73906 1.36566 9.78198L1.34408 9.80359C1.34408 9.83524 1.33251 9.8553 1.31788 9.88068C1.31245 9.89009 1.30661 9.90022 1.30077 9.91195V9.93356C1.29498 9.94513 1.2892 9.95514 1.28383 9.96444C1.26907 9.99001 1.25747 10.0101 1.25747 10.0419L0.024332 15.0683C-0.040554 15.3282 0.024332 15.5883 0.21899 15.7833C0.370496 15.9134 0.565146 16 0.759805 16C0.803112 16 0.867999 16 0.932885 15.9784L5.95164 14.7434C5.97341 14.7324 5.98969 14.727 6.00599 14.7215C6.02213 14.7162 6.0383 14.7108 6.05984 14.7H6.08141C6.12472 14.7 6.16803 14.6782 6.18961 14.6566L6.21119 14.635ZM12.4414 6.27216L5.77856 12.9451L3.09613 10.2153L9.73733 3.56397L12.4414 6.27216ZM4.30747 13.5951L2.42548 11.7103L1.79821 14.2235L4.30747 13.5951ZM12.5711 1.50582C13.0687 1.50582 13.5662 1.70079 13.934 2.06909H13.934C14.6695 2.82746 14.6695 4.04069 13.9339 4.77743L13.5012 5.2107L10.7756 2.50236L11.2082 2.06909C11.5976 1.70078 12.0736 1.50582 12.5711 1.50582Z" fill="#222222" />
									</svg>
									<div class="edit">Edit</div>
								</button>
							</div>
						</td>
					</tr>
				}
			</table>
		</div>
	</div>
</div>

<script>
	var modal = document.getElementById("myModal");

	var btn = document.getElementById("add_new");

	var x = document.getElementById("close");

	var btnc = document.getElementsByClassName("cancel")[0];

	btn.onclick = function () {
		modal.style.display = "block";
		document.body.style.backgroundColor = "#0000004D";
	}

	x.onclick = function () {
		modal.style.display = "none";
		document.body.style.backgroundColor = "";
	}

	btnc.onclick = function () {
		modal.style.display = "none";
		document.body.style.backgroundColor = "";
	}

	function closeModal() {
		var modal = document.getElementById("myModal");
		modal.style.display = "none";
		document.body.style.backgroundColor = "";
	}

	var isModalVisible = false;
	var action = document.getElementById("content");
	var a_btn = document.getElementById("act_btn");

	a_btn.onclick = function () {
		if (isModalVisible) {
			action.style.display = "none";
		} else {
			action.style.display = "block";
		}

		isModalVisible = !isModalVisible;
	}

	function ShowActionMenu(userId) {
		var contentId = "content-" + userId;
		var content = document.getElementById(contentId);

		if (content.style.display === "block") {
			content.style.display = "none";
		} else {
			content.style.display = "block";
		}
	}

	window.refreshPage = function () {
		location.reload(true);
	};
</script>

@code {
	private string phone;
	private string fullName;
	private string email;
	private string team;
	private string searchTerm;
	private int teamId;
	private string position = "RegularEmployee";

	private IEnumerable<Team> teams;
	private List<User> Users { get; set; } = new List<User>();
	private List<string> UserRoles { get; set; } = new List<string>();
	private List<User> filteredUsers;
	private List<User> temp;

	private void UpdatePosition(ChangeEventArgs e)
	{
		position = e.Value.ToString();
	}

	protected override async Task OnInitializedAsync()
	{
		foreach (var user in _unitOfWork.User.GetAll(includeProperties: "Team").ToList())
		{
			Users.Add(user);
			var roles = await _userManager.GetRolesAsync(user);
			UserRoles.Add(roles.First());
		}
		LoadData();
		OnParametersSet();
	}

	private async void LoadData()
	{
		filteredUsers = Users;
		ApplyFilter();
	}

	protected override void OnParametersSet()
	{
		ApplyFilter();
	}

	private void OnSearchInput(ChangeEventArgs e)
	{
		searchTerm = e.Value.ToString();
		ApplyFilter();
	}

	private void ApplyFilter()
	{
		if (string.IsNullOrEmpty(searchTerm))
		{
			Users = filteredUsers;
		}
		else
		{
			temp = Users
				.Where(u => u.FullName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
							u.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
							u.Team.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();

			Users = temp;
		}
	}

	private async Task CreateUser()
	{
		bool teamExists = _unitOfWork.Team.GetAll().Any(x => x.Name.ToLower() == team.ToLower());
		bool mailExists = _unitOfWork.User.GetAll().Any(x => x.Email == email);

		if (mailExists)
		{
			CloseModal();
			return;
		}

		if (!teamExists)
		{
			var newTeam = new Team
				{
					Name = team.ToLower()
				};
			_unitOfWork.Team.Add(newTeam);
			_unitOfWork.Save();
			teamId = newTeam.Id;
		}
		else
		{
			teams = _unitOfWork.Team.GetAll();
			foreach (var t in teams)
			{
				if (team.ToLower() == t.Name.ToLower())
					teamId = t.Id;
			}
		}

		var newUser = new User
			{
				FullName = fullName,
				Email = email,
				PhoneNumber = phone,
				UserName = email,
				TeamId = teamId
			};

		_unitOfWork.User.Add(newUser);
		_unitOfWork.Save();

		var code = await _userManager.GeneratePasswordResetTokenAsync(newUser);
		code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
		var callbackUrl = "Identity/Account/ResetPassword";
		await _customEmailSender.SendResetPasswordTokenAsync(newUser.Email, callbackUrl);

		await CloseModal();
	}

	private async Task CloseModal()
	{
		fullName = "";
		email = "";
		position = "";
		phone = "";
		team = "";

		await JSRuntime.InvokeVoidAsync("closeModal");
	}

	private void ShowActionMenu(string userId)
	{
		JSRuntime.InvokeVoidAsync("ShowActionMenu", userId);
	}

	private void EditUser(string userId)
	{
		_navigationManager.NavigateTo($"/edit-employee/{userId}");
	}

	string getStatusColor(string status)
	{
		if (status == "Approved")
		{
			return "approved-color";
		}
		else if (status == "Rejected")
		{
			return "rejected-color";
		}
		else
		{
			return "status";
		}
	}
}
