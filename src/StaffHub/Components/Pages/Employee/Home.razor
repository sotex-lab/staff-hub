@page "/home"
@using System.Globalization
@using System.Text.Json
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUnitOfWork _unitOfWork
@inject UserManager<IdentityUser> _userManager
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<div class="row">
    <div class="column">
        <div class="ib40">Welcome, @User.FullName</div>
        <div class="ib16">Here you can make a request for your annual leave</div>
        <div class="overall">
            <div class="unit">
                <div class="rb40">@RemainingDays</div>
                <div class="ib12">Remaining days</div>
            </div>
            <div class="bar"></div>
            <div class="unit">
                <div class="rb40">@DaysWaitingForApproval</div>
                <div class="ib12">Day(s) Waiting for approval</div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="mark blue">Dates you want</div>
    <div class="group">
        <span class="mark light-blue">Used</span>
        <span class="mark purple">National Holidays</span>
        <span class="mark yellow">Waiting for Approval</span>
        <span class="mark green">Approved</span>
        <span class="mark red">Rejected</span>
    </div>
</div>

<div class="calendar">
    @for (int i = 0; i < Year.Count; i++)
    {
        <div class="month">
            <span>@((Months)i + 1) @DateTime.Now.Year</span>
            <table>
                <tr>
                    <th>Su</th>
                    <th>Mo</th>
                    <th>Tu</th>
                    <th>We</th>
                    <th>Th</th>
                    <th>Fr</th>
                    <th>Sa</th>
                </tr>
                @foreach (var week in Year[i])
                {
                    <tr>
                        @foreach (var day in week)
                        {
                            <td>
                                @if (day != 0)
                                {
                                    int month = i;
                                    <button class="day"
                                            id="@((i + 1).ToString() + "-" + day.ToString())"
                                            @onclick="@(() => SelectionChanged((month + 1).ToString() + "-" + day.ToString()))">
                                        @day
                                    </button>
                                }
                            </td>
                        }
                    </tr>
                }
            </table>
        </div>
    }

</div>

<div class="row-center">
    <div class="column">
        <label>Enter Message</label>
        <input class="input" @bind="Description" />
        <button class="btn" @onclick="@(() => RequestLeave())">
            Make a Request
        </button>
    </div>
</div>

@code {

    internal enum Months : int
    {
        Jan = 1,
        Feb = 2,
        Mar = 3,
        Apr = 4,
        May = 5,
        Jun = 6,
        Jul = 7,
        Aug = 8,
        Sep = 9,
        Oct = 10,
        Nov = 11,
        Dec = 12
    }

    internal class LeaveDto
    {
        public DateOnly StartDate { get; set; }
        public DateOnly EndDate { get; set; }
        public string Status { get; set; }
    }

    public List<List<int[]>> Year { get; set; } = new List<List<int[]>>();

    public DateOnly? SelectedStart { get; set; } = null;
    public DateOnly? SelectedEnd { get; set; } = null;

    private ClaimsPrincipal CurrentUser;
    private User User { get; set; }
    private string UserId { get; set; }

    private int RemainingDays { get; set; }
    private int DaysWaitingForApproval { get; set; }

    private string Description { get; set; }
    private List<PublicHoliday> PublicHolidays { get; set; }


    protected async override Task OnInitializedAsync()
    {
        PopulateTheCurrentYear();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        CurrentUser = authState.User;
        UserId = _userManager.GetUserId(CurrentUser);
        User = _unitOfWork.User.Get(u => u.Id == UserId);

        CalculateRemainingDays();
        CalculateDaysWaitingForApproval();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await MarkTheCurrentDate();
        await MarkPreviousLeaves();
        await MarkThePublicHolidays();
    }

    private void PopulateTheCurrentYear()
    {
        for (int i = 1; i <= 12; i++)
        {
            Year.Add(PopulateMonth(i));
        }
    }

    private List<int[]> PopulateMonth(int rb)
    {
        int daysOfMonth = DateTime.DaysInMonth(DateTime.Now.Year, rb);
        DateTime startOfTheMonth = new DateTime(2024, rb, 1);
        int dayOfTheWeek = Convert.ToInt32(startOfTheMonth.DayOfWeek.ToString("d"));
        List<int> Month = new List<int>(42);
        Month = Enumerable.Repeat(0, 42).ToList();

        for (int i = 0; i < Month.Count; i++)
        {
            if (i == dayOfTheWeek)
            {
                Month[i] = 1;
                for (int j = 1; j < daysOfMonth; j++)
                {
                    Month[i + j] = j + 1;
                }
                break;
            }
        }

        return Month.Chunk(7).ToList();
    }

    private async Task MarkTheCurrentDate()
    {
        await JS.InvokeVoidAsync("markTheCurrentDate");
    }

    private async Task MarkThePublicHolidays()
    {
        IEnumerable<PublicHoliday> publicHolidays = _unitOfWork.PublicHoliday.GetAll();
        PublicHolidays = publicHolidays.Where(x => x.StartDate.Year == DateTime.Now.Year).ToList();

        await JS.InvokeVoidAsync("markThePublicHolidays", PublicHolidays);
    }

    private async Task MarkPreviousLeaves()
    {
        IEnumerable<DaysTally> daysTallies = _unitOfWork.DayTally.GetAll(x => x.UserId == UserId, includeProperties: "Leave");
        IEnumerable<DaysTally> filtered = daysTallies.Where(x => x.Leave != null);

        List<LeaveDto> leaves = new List<LeaveDto>();
        foreach (var dt in filtered)
        {
            if (dt.Timestamp.Year == DateTime.Now.Year)
            {
                leaves.Add(new LeaveDto() { StartDate = dt.Leave.StartDate, EndDate = dt.Leave.EndDate, Status = dt.Leave.Status });
            }
        }

        await JS.InvokeVoidAsync("markPreviousLeaves", leaves);
    }

    private async Task SelectionChanged(string id)
    {
        string[] date = id.Split("-");
        string month = date[0];
        string day = date[1];
        int year = DateTime.Now.Year;
        DateOnly Selected = new DateOnly(year, Int32.Parse(month), Int32.Parse(day));
        if (SelectedStart is null)
        {
            SelectedStart = Selected;
            await JS.InvokeVoidAsync("select", SelectedStart, SelectedEnd, true);
        }
        else if (SelectedEnd is null)
        {
            if (SelectedStart > Selected)
            {
                SelectedEnd = SelectedStart;
                SelectedStart = Selected;
            }
            else
            {
                SelectedEnd = Selected;
            }
            await JS.InvokeVoidAsync("select", SelectedStart, SelectedEnd, false);
        }
        else
        {
            await JS.InvokeVoidAsync("deselect", SelectedStart, SelectedEnd);
            SelectedStart = Selected;
            SelectedEnd = null;
            await JS.InvokeVoidAsync("select", SelectedStart, SelectedEnd, true);
        }
    }

    private void CalculateRemainingDays()
    {
        RemainingDays = 0;
        IEnumerable<DaysTally> daysTallies = _unitOfWork.DayTally.GetAll(x => x.UserId == UserId);

        foreach (var dt in daysTallies)
        {
            RemainingDays += dt.Amount;
        }
    }

    private void CalculateDaysWaitingForApproval()
    {
        DaysWaitingForApproval = 0;

        IEnumerable<DaysTally> daysTallies = _unitOfWork.DayTally.GetAll(x => x.UserId == UserId, includeProperties: "Leave");
        IEnumerable<DaysTally> filtered = daysTallies.Where(x => x.Leave != null);

        List<LeaveDto> leaves = new List<LeaveDto>();
        foreach (var dt in filtered)
        {
            if(dt.Leave.Status == "Pending")
            {
                DaysWaitingForApproval -= dt.Amount;
            }
        }
    }

    private async void RequestLeave()
    {
        if (SelectedEnd is null)
        {
            SelectedEnd = SelectedStart;
        }

        if (SelectedStart is null)
        {
            await JS.InvokeVoidAsync("alert", "Please select start date!");
            return;
        }

        if(SelectedStart <= DateOnly.FromDateTime(DateTime.Now))
        {
            await JS.InvokeVoidAsync("deselect", SelectedStart, SelectedEnd);
            await JS.InvokeVoidAsync("alert", "You selected a date in the past!");
            SelectedStart = null;
            SelectedEnd = null;
            return;
        }

        if (Description is null || Description == String.Empty)
        {
            await JS.InvokeVoidAsync("alert", "Please enter message!");
            return;
        }

        int amount = 0;
        DateOnly selectedStart = (DateOnly)SelectedStart;
        DateOnly selectedEnd = (DateOnly)SelectedEnd;
        amount = selectedEnd.DayNumber - selectedStart.DayNumber + 1;

        if (amount > RemainingDays)
        {
            await JS.InvokeVoidAsync("deselect", SelectedStart, SelectedEnd);
            await JS.InvokeVoidAsync("alert", "You don't have enough days left!");
            SelectedStart = null;
            SelectedEnd = null;
            return;
        }

        foreach (var ph in PublicHolidays)
        {
            if (ph.StartDate >= selectedStart && ph.StartDate <= selectedEnd)
            {
                amount--;
            }
        }

        DateOnly temp = selectedStart;
        while (temp <= SelectedEnd)
        {
            if ((temp.DayOfWeek == DayOfWeek.Saturday) || (temp.DayOfWeek == DayOfWeek.Sunday))
            {
                amount--;
            }

            temp = temp.AddDays(1);
        }

        DaysTally newDaysTally = new()
            {
                Amount = -amount,
                Timestamp = DateTime.Now,
                Action = "Scheduled leave",
                UserId = UserId
            };

        _unitOfWork.DayTally.Add(newDaysTally);
        _unitOfWork.Save();

        Leave newLeave = new()
            {
                StartDate = (DateOnly)SelectedStart,
                EndDate = (DateOnly)SelectedEnd,
                Description = Description,
                Status = "Pending",
                DaysTally = newDaysTally
            };

        _unitOfWork.Leave.Add(newLeave);
        _unitOfWork.Save();

        newDaysTally.LeaveId = newLeave.Id;
        _unitOfWork.DayTally.Update(newDaysTally);
        _unitOfWork.Save();

        SelectedStart = null;
        SelectedEnd = null;
        Description = "";
        CalculateRemainingDays();
        CalculateDaysWaitingForApproval();
    }

}

<script>

    window.markTheCurrentDate = () => {
        let today = new Date()

        let month = today.getMonth() + 1
        let day = today.getDate()
        let id = month + "-" + day

        document.getElementById(id).style.border = "2px solid"
        document.getElementById(id).style.borderRadius = "4px"
    }

    window.markThePublicHolidays = (publicHolidays) => {
        publicHolidays.forEach((element) => {
            let date = new Date(element.startDate)
            let month = date.getMonth() + 1
            let day = date.getDate()
            let id = month + "-" + day

            document.getElementById(id).style.backgroundColor = "rgba(243, 198, 255, 1)";
        });
    }

    window.markPreviousLeaves = (leaves) => {
        let today = new Date()
        leaves.forEach((element) => {
            let startDate = new Date(element.startDate)
            let endDate = new Date(element.endDate)
            let temp = startDate
            while (temp <= endDate) {
                let month = temp.getMonth() + 1
                let day = temp.getDate()
                let id = month + "-" + day
                document.getElementById(id).disabled = true;
                if (element.status == "Pending") {
                    document.getElementById(id).style.backgroundColor = "rgba(255, 224, 179, 1)";
                }
                else if (element.status == "Approved") {
                    if (endDate < today) {
                        document.getElementById(id).style.backgroundColor = "rgba(179, 246, 255, 1)";
                    }
                    else {
                        document.getElementById(id).style.backgroundColor = "rgba(184, 249, 218, 1)";
                    }
                }
                else if (element.status == "Rejected") {
                    document.getElementById(id).style.backgroundColor = "rgba(250, 196, 196, 1)";
                }

                temp.setDate(temp.getDate() + 1)
            }

        });
    }

    window.select = (selectionStart, selectionEnd, first) => {
        let startDate = new Date(selectionStart)
        let endDate = new Date(selectionEnd)
        if (first) {
            endDate = new Date(startDate.getTime())
        }
        startDate.setMinutes(startDate.getMinutes() + startDate.getTimezoneOffset());
        endDate.setMinutes(endDate.getMinutes() + endDate.getTimezoneOffset());
        let temp = startDate
        while (temp <= endDate) {
            let month = temp.getMonth() + 1
            let day = temp.getDate()
            let id = month + "-" + day

            document.getElementById(id).disabled = true;
            document.getElementById(id).style.backgroundColor = "rgba(208, 211, 253, 1)";

            temp.setDate(temp.getDate() + 1);
        }
    }

    window.deselect = (selectionStart, selectionEnd) => {
        let startDate = new Date(selectionStart)
        let endDate = new Date(selectionEnd)
        startDate.setMinutes(startDate.getMinutes() + startDate.getTimezoneOffset());
        endDate.setMinutes(endDate.getMinutes() + endDate.getTimezoneOffset());
        let temp = startDate
        while (temp <= endDate) {
            let month = temp.getMonth() + 1
            let day = temp.getDate()
            let id = month + "-" + day

            document.getElementById(id).disabled = false;
            document.getElementById(id).style.backgroundColor = "transparent";

            temp.setDate(temp.getDate() + 1)
        }
    }

</script>
