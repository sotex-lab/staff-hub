@page "/employees"
@attribute [Authorize(Roles = SD.Role_Admin)]
@rendermode InteractiveServer
@inject IUnitOfWork _unitOfWork
@inject UserManager<IdentityUser> _userManager
@inject NavigationManager _navigationManager


<div class="container mt-2 text-center">
    <div class="row">
        <a class="btn btn-primary" href="/identity/account/register" role="button">Add New</a>
    </div>
    <div class="row mt-2">
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Email</th>
                    <th scope="col">Name</th>
                    <th scope="col">Phone Number</th>
                    <th scope="col">Team</th>
                    <th scope="col">Role</th>
                    <th scope="col">Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var obj in Users)
                {
                    <tr>
                        <td>@obj.user.Email</td>
                        <td>@obj.user.FullName</td>
                        <td>@obj.user.PhoneNumber</td>
                        <td>@obj.user.Team.Name</td>
                        <td>@obj.role</td>
                        <td><button type="button" class="btn btn-primary" @onclick="@(() => Edit(obj.user.Id))">Edit</button></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>


@code {
    private List<UserDto> Users { get; set; } = new List<UserDto>();

    internal class UserDto
    {
        public User user { get; set; }
        public string role { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await PopulateUsers();
        await base.OnInitializedAsync();
    }

    private async Task PopulateUsers()
    {
        foreach(var user in _unitOfWork.User.GetAll(includeProperties: "Team"))
        {
            Users.Add(new UserDto
                {
                    user = user,
                    role = (await _userManager.GetRolesAsync(user))[0]
                });
        }
    }

    private void Edit(string userId)
    {
        _navigationManager.NavigateTo($"/edit-employee/{userId}");
    }

}
