@page "/history"
@using Persistence.IRepository
@rendermode InteractiveServer
@inject NavigationManager _navigationManager
@inject IUnitOfWork _unitOfWork


<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link rel="stylesheet" href="panel.css">
<title>History</title>

<div class="panel">
	<div class="container">
		<div class="employee">
			History
		</div>
		<div class="commands">
			<button class="btn1" id="add_new" style="width: 140px" @onclick="MakeRequest">
				Make a Request
			</button>
		</div>
		<div class="lista">
			<table>
				<tr>
					<th>Date of request</th>
					<th>Day(s) Requested</th>
					<th>Period</th>
					<th>Used</th>
					<th>Status</th>
				</tr>
				@foreach (var l in DaysTallies)
				{
					<tr>
						<td>@l.Timestamp.ToShortDateString()</td>
						<td>@l.Amount</td>
						<td>@l.Leave.StartDate <br /> @l.Leave.EndDate</td>
						@if (l.Leave.EndDate < DateOnly.FromDateTime(DateTime.Now))
						{
							<td>Yes</td>
						}
						else if (l.Leave.Status == "Rejected" || l.Leave.Status == "Pending")
						{
							<td>No</td>
						}
						else
						{
							<td>No</td>
						}
						<td>
							<div class="status @getStatusColor(l.Leave.Status)">@l.Leave.Status</div>
							<br />
							<span>@l.Leave.Description</span>
						</td>
					</tr>
				}
			</table>
		</div>
	</div>
</div>


@code {
	string status;

	private List<DaysTally> DaysTallies { get; set; } = new List<DaysTally>();

	protected override async Task OnInitializedAsync()
	{
		foreach (var leave in _unitOfWork.DayTally.GetAll(includeProperties: "Leave").ToList())
		{
			DaysTallies.Add(leave);
		}
	}

	string getStatusColor(string status)
	{
		if (status == "Approved")
		{
			return "approved-color";
		}
		else if (status == "Rejected")
		{
			return "rejected-color";
		}
		else
		{
			return "status";
		}
	}

	private void MakeRequest()
	{
		_navigationManager.NavigateTo("/scheduleLeave");
	}

}
